export class VectorFont {
    constructor(display) {
        this.display = display;
        
        // Hershey Simplex font data
        // Format: first two numbers are width and number of points
        // Points are x,y pairs, -1,-1 means pen up
        this.simplexData = [
            [16], // Space (32)
            [10, 5,21, 5,7, -1,-1, 5,2, 4,1, 5,0, 6,1, 5,2], // ! (33)
            [16, 4,21, 4,14, -1,-1, 12,21, 12,14], // " (34)
            [21, 11,25, 4,-7, -1,-1, 17,25, 10,-7, -1,-1, 4,12, 18,12, -1,-1, 3,6, 17,6], // # (35)
            [20, 8,25, 8,-4, -1,-1, 12,25, 12,-4, -1,-1, 17,18, 15,20, 12,21, 8,21, 5,20, 3,18, 3,16, 4,14, 5,13, 7,12, 13,10, 15,9, 16,8, 17,6, 17,3, 15,1, 12,0, 8,0, 5,1, 3,3], // $ (36)
            [24, 21,21, 3,0, -1,-1, 8,21, 10,19, 10,17, 9,15, 7,14, 5,14, 3,16, 3,18, 4,20, 6,21, 8,21, 10,20, 13,19, 16,19, 19,20, 21,21, -1,-1, 17,7, 15,6, 14,4, 14,2, 16,0, 18,0, 20,1, 21,3, 21,5, 19,7, 17,7], // % (37)
            [26, 23,12, 23,13, 22,14, 21,14, 20,13, 19,11, 17,6, 15,3, 13,1, 11,0, 7,0, 5,1, 4,2, 3,4, 3,6, 4,8, 5,9, 12,13, 13,14, 14,16, 14,18, 13,20, 11,21, 9,20, 8,18, 8,16, 9,13, 11,10, 16,3, 18,1, 20,0, 22,0, 23,1, 23,2], // & (38)
            [10, 5,19, 4,20, 5,21, 6,20, 6,18, 5,16, 4,15], // ' (39)
            [14, 11,25, 9,23, 7,20, 5,16, 4,11, 4,7, 5,2, 7,-2, 9,-5, 11,-7], // ( (40)
            [14, 3,25, 5,23, 7,20, 9,16, 10,11, 10,7, 9,2, 7,-2, 5,-5, 3,-7], // ) (41)
            [16, 8,21, 8,9, -1,-1, 3,18, 13,12, -1,-1, 13,18, 3,12], // * (42)
            [26, 13,18, 13,0, -1,-1, 4,9, 22,9], // + (43)
            [10, 6,1, 5,0, 4,1, 5,2, 6,1, 6,-1, 5,-3, 4,-4], // , (44)
            [26, 4,9, 22,9], // - (45)
            [10, 5,2, 4,1, 5,0, 6,1, 5,2], // . (46)
            [22, 20,25, 2,-7], // / (47)
            [20, 9,21, 6,20, 4,17, 3,12, 3,9, 4,4, 6,1, 9,0, 11,0, 14,1, 16,4, 17,9, 17,12, 16,17, 14,20, 11,21, 9,21], // 0 (48)
            [20, 6,17, 8,18, 11,21, 11,0], // 1 (49)
            [20, 4,16, 4,17, 5,19, 6,20, 8,21, 12,21, 14,20, 15,19, 16,17, 16,15, 15,13, 13,10, 3,0, 17,0], // 2 (50)
            [20, 5,21, 16,21, 10,13, 13,13, 15,12, 16,11, 17,8, 17,6, 16,3, 14,1, 11,0, 8,0, 5,1, 4,2, 3,4], // 3 (51)
            [20, 13,21, 3,7, 18,7, -1,-1, 13,21, 13,0], // 4 (52)
            [20, 15,21, 5,21, 4,12, 5,13, 8,14, 11,14, 14,13, 16,11, 17,8, 17,6, 16,3, 14,1, 11,0, 8,0, 5,1, 4,2, 3,4], // 5 (53)
            [20, 16,18, 15,20, 12,21, 10,21, 7,20, 5,17, 4,12, 4,7, 5,3, 7,1, 10,0, 11,0, 14,1, 16,3, 17,6, 17,7, 16,10, 14,12, 11,13, 10,13, 7,12, 5,10, 4,7], // 6 (54)
            [20, 17,21, 7,0, -1,-1, 3,21, 17,21], // 7 (55)
            [20, 8,21, 5,20, 4,18, 4,16, 5,14, 7,13, 11,12, 14,11, 16,9, 17,7, 17,4, 16,2, 15,1, 12,0, 8,0, 5,1, 4,2, 3,4, 3,7, 4,9, 6,11, 9,12, 13,13, 15,14, 16,16, 16,18, 15,20, 12,21, 8,21], // 8 (56)
            [20, 16,14, 15,11, 13,9, 10,8, 9,8, 6,9, 4,11, 3,14, 3,15, 4,18, 6,20, 9,21, 10,21, 13,20, 15,18, 16,14, 16,9, 15,4, 13,1, 10,0, 8,0, 5,1, 4,3], // 9 (57)
            [10, 5,14, 4,13, 5,12, 6,13, 5,14, -1,-1, 5,2, 4,1, 5,0, 6,1, 5,2], // : (58)
            [10, 5,14, 4,13, 5,12, 6,13, 5,14, -1,-1, 6,1, 5,0, 4,1, 5,2, 6,1, 6,-1, 5,-3, 4,-4], // ; (59)
            [24, 20,18, 4,9, 20,0], // < (60)
            [26, 4,12, 22,12, -1,-1, 4,6, 22,6], // = (61)
            [24, 4,18, 20,9, 4,0], // > (62)
            [18, 3,16, 3,17, 4,19, 5,20, 7,21, 11,21, 13,20, 14,19, 15,17, 15,15, 14,13, 13,12, 9,10, 9,7, -1,-1, 9,2, 8,1, 9,0, 10,1, 9,2], // ? (63)
            [27, 18,13, 17,15, 15,16, 12,16, 10,15, 9,14, 8,11, 8,8, 9,6, 11,5, 14,5, 16,6, 17,8, -1,-1, 12,16, 10,14, 9,11, 9,8, 10,6, 11,5, -1,-1, 18,16, 17,8, 17,6, 19,5, 21,5, 23,7, 24,10, 24,12, 23,15, 21,17, 18,18, 15,18, 12,17, 9,15, 7,12, 6,9, 6,7, 7,4, 9,2, 12,1, 15,1, 18,2, 20,4, 21,7, -1,-1, 19,16, 18,8, 18,6, 19,5], // @ (64)
            [18, 9,21, 1,0, -1,-1, 9,21, 17,0, -1,-1, 4,7, 14,7], // A (65)
            [21, 4,21, 4,0, -1,-1, 4,21, 13,21, 16,20, 17,19, 18,17, 18,15, 17,13, 16,12, 13,11, -1,-1, 4,11, 13,11, 16,10, 17,9, 18,7, 18,4, 17,2, 16,1, 13,0, 4,0], // B (66)
            [21, 18,16, 17,18, 15,20, 13,21, 9,21, 7,20, 5,18, 4,16, 3,13, 3,8, 4,5, 5,3, 7,1, 9,0, 13,0, 15,1, 17,3, 18,5], // C (67)
            [21, 4,21, 4,0, -1,-1, 4,21, 11,21, 14,20, 16,18, 17,16, 18,13, 18,8, 17,5, 16,3, 14,1, 11,0, 4,0], // D (68)
            [19, 4,21, 4,0, -1,-1, 4,21, 17,21, -1,-1, 4,11, 12,11, -1,-1, 4,0, 17,0], // E (69)
            [18, 4,21, 4,0, -1,-1, 4,21, 17,21, -1,-1, 4,11, 12,11], // F (70)
            [21, 18,16, 17,18, 15,20, 13,21, 9,21, 7,20, 5,18, 4,16, 3,13, 3,8, 4,5, 5,3, 7,1, 9,0, 13,0, 15,1, 17,3, 18,5, 18,8, -1,-1, 13,8, 18,8], // G (71)
            [22, 4,21, 4,0, -1,-1, 18,21, 18,0, -1,-1, 4,11, 18,11], // H (72)
            [8, 4,21, 4,0], // I (73)
            [16, 12,21, 12,5, 11,2, 10,1, 8,0, 6,0, 4,1, 3,2, 2,5, 2,7], // J (74)
            [21, 4,21, 4,0, -1,-1, 18,21, 4,7, -1,-1, 9,12, 18,0], // K (75)
            [17, 4,21, 4,0, -1,-1, 4,0, 16,0], // L (76)
            [24, 4,21, 4,0, -1,-1, 4,21, 12,0, -1,-1, 20,21, 12,0, -1,-1, 20,21, 20,0], // M (77)
            [22, 4,21, 4,0, -1,-1, 4,21, 18,0, -1,-1, 18,21, 18,0], // N (78)
            [22, 9,21, 7,20, 5,18, 4,16, 3,13, 3,8, 4,5, 5,3, 7,1, 9,0, 13,0, 15,1, 17,3, 18,5, 19,8, 19,13, 18,16, 17,18, 15,20, 13,21, 9,21], // O (79)
            [21, 4,21, 4,0, -1,-1, 4,21, 13,21, 16,20, 17,19, 18,17, 18,14, 17,12, 16,11, 13,10, 4,10], // P (80)
            [22, 9,21, 7,20, 5,18, 4,16, 3,13, 3,8, 4,5, 5,3, 7,1, 9,0, 13,0, 15,1, 17,3, 18,5, 19,8, 19,13, 18,16, 17,18, 15,20, 13,21, 9,21, -1,-1, 12,4, 18,-2], // Q (81)
            [21, 4,21, 4,0, -1,-1, 4,21, 13,21, 16,20, 17,19, 18,17, 18,15, 17,13, 16,12, 13,11, 4,11, -1,-1, 11,11, 18,0], // R (82)
            [20, 17,18, 15,20, 12,21, 8,21, 5,20, 3,18, 3,16, 4,14, 5,13, 7,12, 13,10, 15,9, 16,8, 17,6, 17,3, 15,1, 12,0, 8,0, 5,1, 3,3], // S (83)
            [16, 8,21, 8,0, -1,-1, 1,21, 15,21], // T (84)
            [22, 4,21, 4,6, 5,3, 7,1, 10,0, 12,0, 15,1, 17,3, 18,6, 18,21], // U (85)
            [18, 1,21, 9,0, -1,-1, 17,21, 9,0], // V (86)
            [24, 2,21, 7,0, -1,-1, 12,21, 7,0, -1,-1, 12,21, 17,0, -1,-1, 22,21, 17,0], // W (87)
            [20, 3,21, 17,0, -1,-1, 17,21, 3,0], // X (88)
            [18, 1,21, 9,11, 9,0, -1,-1, 17,21, 9,11], // Y (89)
            [20, 17,21, 3,0, -1,-1, 3,21, 17,21, -1,-1, 3,0, 17,0], // Z (90)
            [14, 4,25, 4,-7, -1,-1, 5,25, 5,-7, -1,-1, 4,25, 11,25, -1,-1, 4,-7, 11,-7], // [ (91)
            [14, 0,21, 14,-3], // \ (92)
            [14, 9,25, 9,-7, -1,-1, 10,25, 10,-7, -1,-1, 3,25, 10,25, -1,-1, 3,-7, 10,-7], // ] (93)
            [16, 6,15, 8,18, 10,15, -1,-1, 3,12, 8,17, 13,12, -1,-1, 8,17, 8,0], // ^ (94)
            [16, 0,-2, 16,-2], // _ (95)
            [10, 6,21, 5,20, 4,18, 4,16, 5,15, 6,16, 5,17], // ` (96)
            [19, 15,14, 15,0, -1,-1, 15,11, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // a (97)
            [19, 4,21, 4,0, -1,-1, 4,11, 6,13, 8,14, 11,14, 13,13, 15,11, 16,8, 16,6, 15,3, 13,1, 11,0, 8,0, 6,1, 4,3], // b (98)
            [18, 15,11, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // c (99)
            [19, 15,21, 15,0, -1,-1, 15,11, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // d (100)
            [18, 3,8, 15,8, 15,10, 14,12, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // e (101)
            [12, 10,21, 8,21, 6,20, 5,17, 5,0, -1,-1, 2,14, 9,14], // f (102)
            [19, 15,14, 15,-2, 14,-5, 13,-6, 11,-7, 8,-7, 6,-6, -1,-1, 15,11, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // g (103)
            [19, 4,21, 4,0, -1,-1, 4,10, 7,13, 9,14, 12,14, 14,13, 15,10, 15,0], // h (104)
            [8, 3,21, 4,20, 5,21, 4,22, 3,21, -1,-1, 4,14, 4,0], // i (105)
            [10, 5,21, 6,20, 7,21, 6,22, 5,21, -1,-1, 6,14, 6,-3, 5,-6, 3,-7, 1,-7], // j (106)
            [17, 4,21, 4,0, -1,-1, 14,14, 4,4, -1,-1, 8,8, 15,0], // k (107)
            [8, 4,21, 4,0], // l (108)
            [30, 4,14, 4,0, -1,-1, 4,10, 7,13, 9,14, 12,14, 14,13, 15,10, 15,0, -1,-1, 15,10, 18,13, 20,14, 23,14, 25,13, 26,10, 26,0], // m (109)
            [19, 4,14, 4,0, -1,-1, 4,10, 7,13, 9,14, 12,14, 14,13, 15,10, 15,0], // n (110)
            [19, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3, 16,6, 16,8, 15,11, 13,13, 11,14, 8,14], // o (111)
            [19, 4,14, 4,-7, -1,-1, 4,11, 6,13, 8,14, 11,14, 13,13, 15,11, 16,8, 16,6, 15,3, 13,1, 11,0, 8,0, 6,1, 4,3], // p (112)
            [19, 15,14, 15,-7, -1,-1, 15,11, 13,13, 11,14, 8,14, 6,13, 4,11, 3,8, 3,6, 4,3, 6,1, 8,0, 11,0, 13,1, 15,3], // q (113)
            [13, 4,14, 4,0, -1,-1, 4,8, 5,11, 7,13, 9,14, 12,14], // r (114)
            [17, 14,11, 13,13, 10,14, 7,14, 4,13, 3,11, 4,9, 6,8, 11,7, 13,6, 14,4, 14,3, 13,1, 10,0, 7,0, 4,1, 3,3], // s (115)
            [12, 5,21, 5,4, 6,1, 8,0, 10,0, -1,-1, 2,14, 9,14], // t (116)
            [19, 4,14, 4,4, 5,1, 7,0, 10,0, 12,1, 15,4, -1,-1, 15,14, 15,0], // u (117)
            [16, 2,14, 8,0, -1,-1, 14,14, 8,0], // v (118)
            [22, 3,14, 7,0, -1,-1, 11,14, 7,0, -1,-1, 11,14, 15,0, -1,-1, 19,14, 15,0], // w (119)
            [17, 3,14, 14,0, -1,-1, 14,14, 3,0], // x (120)
            [16, 2,14, 8,0, -1,-1, 14,14, 8,0, 6,-4, 4,-6, 2,-7, 1,-7], // y (121)
            [17, 14,14, 3,0, -1,-1, 3,14, 14,14, -1,-1, 3,0, 14,0], // z (122)
            [14, 9,25, 7,24, 6,23, 5,21, 5,19, 6,17, 7,16, 8,14, 8,12, 6,10, -1,-1, 7,24, 6,22, 6,20, 7,18, 8,17, 9,15, 9,13, 8,11, 4,9, 8,7, 9,5, 9,3, 8,1, 7,0, 6,-2, 6,-4, 7,-6, -1,-1, 6,8, 8,6, 8,4, 7,2, 6,1, 5,-1, 5,-3, 6,-5, 7,-6, 9,-7], // { (123)
            [8, 4,25, 4,-7], // | (124)
            [14, 5,25, 7,24, 8,23, 9,21, 9,19, 8,17, 7,16, 6,14, 6,12, 8,10, -1,-1, 7,24, 8,22, 8,20, 7,18, 6,17, 5,15, 5,13, 6,11, 10,9, 6,7, 5,5, 5,3, 6,1, 7,0, 8,-2, 8,-4, 7,-6, -1,-1, 8,8, 6,6, 6,4, 7,2, 8,1, 9,-1, 9,-3, 8,-5, 7,-6, 5,-7], // } (125)
            [24, 3,6, 3,8, 4,11, 6,12, 8,12, 10,11, 14,8, 16,7, 18,7, 20,8, 21,10, -1,-1, 3,8, 4,10, 6,11, 8,11, 10,10, 14,7, 16,6, 18,6, 20,7, 21,10, 21,12] // ~ (126)
        ];
    }
    
    draw(x, y, size, text) {
        let currentX = x;
        
        for (let i = 0; i < text.length; i++) {
            const charCode = text.charCodeAt(i);
            if (charCode >= 32 && charCode <= 126) {
                this._drawChar(currentX, y, size, charCode - 32);
                const charData = this.simplexData[charCode - 32];
                const charWidth = charData[0];
                currentX += charWidth * size; // Use size directly as spacing
            }
        }
    }
    
    // Measure the width and height of text at a given size
    measure(text, size) {
        let width = 0;
        // Font height is roughly 21 units in the font data, scaled by size
        const height = 21 * size;
        
        for (let i = 0; i < text.length; i++) {
            const charCode = text.charCodeAt(i);
            if (charCode >= 32 && charCode <= 126) {
                const charData = this.simplexData[charCode - 32];
                const charWidth = charData[0];
                width += charWidth * size;
            }
        }
        
        return { width, height };
    }
    
    // Draw text centered at x
    drawCentered(x, y, size, text) {
        const metrics = this.measure(text, size);
        this.draw(x - metrics.width / 2, y, size, text);
    }
    
    // Draw text right-aligned at x
    drawRightAligned(x, y, size, text) {
        const metrics = this.measure(text, size);
        this.draw(x - metrics.width, y, size, text);
    }
    
    _drawChar(x, y, size, charIndex) {
        const data = this.simplexData[charIndex];
        if (!data || data.length < 2) return;
        
        const scale = size; // Use size directly as scale
        let penDown = false;
        
        for (let i = 1; i < data.length; i += 2) {
            const px = data[i];
            const py = data[i + 1];
            
            if (px === -1 && py === -1) {
                // Pen up
                if (penDown) {
                    this.display.endDraw();
                    penDown = false;
                }
            } else {
                const dx = x + px * scale;
                const dy = y - py * scale; // Match original C code exactly
                
                if (!penDown) {
                    this.display.beginDraw(dx, dy);
                    penDown = true;
                } else {
                    this.display.drawTo(dx, dy);
                }
            }
        }
        
        if (penDown) {
            this.display.endDraw();
        }
    }
}